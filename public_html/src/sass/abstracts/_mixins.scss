// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

// ----
// Sass (v3.4.13)
// Compass (v1.0.3)
// ----

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////


///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);;
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}


/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

/// Make a context based selector a little more friendly
/// @author Steve Slade
/// @param {String} $context
@mixin when-after($context) {

    @if ($context == 'self') {
        & + & {
            @content;
        }
    } @else {
        #{$context} + & {
            @content;
        }
    }

}

/// Make a context based selector a little more friendly
/// @author Steve Slade
/// @param {String} $context
/// @example scss - Used to exclude a BEM modifier
///   .block__element:not(block__element--foo):not(block__element--bar) {
///       color: red;
///   }
///
@mixin not-modified-by($modifierList...) {
    //if only a single value given
    @if (length($modifierList) == 1){
        //it is probably a list variable so set ignore list to the variable
        $modifierList: nth($modifierList,1);
    }
    //set up an empty $notOutput variable
    $notOutput: '';
    //for each item in the list
    @each $not in $modifierList {
        //generate a :not(currentSelector--[ignored_modifier]) segment for each item in the ignore list and put them back to back
        $notOutput: $notOutput + ':not(#{&}--#{$not})';
    }
    //output the full :not() rule including all ignored items
    &#{$notOutput} {
        @content;
    }
}

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
    $raw-query: map-get($breakpoints, $breakpoint);

    @if $raw-query {
        $query: $raw-query;
        @if type-of($raw-query) == 'string' {
            $query: to-number($raw-query);
        }

        @media only screen and (max-width: $query - 1) {
            @content;
        }
    } @else {
        @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
    }
}


/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-from($breakpoint) {
    $raw-query: map-get($breakpoints, $breakpoint);

    @if $raw-query {
        $query: if(
            type-of($raw-query) == 'string',
            unquote($raw-query),
            inspect($raw-query)
        );

        @media only screen and (min-width: $query) {
            @content;
        }
    } @else {
        @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
    }
}

/// Use CSS3 selectors to change the styles based on
/// the number of the siblings that the selector has
/// @access public
/// @author Steve Slade
/// @param {Int} $siblingCount - Number of sublings
@mixin when-there-are($siblingCount: 0) {


    $variableType: $siblingCount;

    @if type-of($variableType) == 'string' {

        @error 'Must provide an integer for $siblingCount';

    } @else {

        @if $siblingCount == 1  {

            &:first-child:nth-last-child(#{$siblingCount}) {
                @content;
            }

        } @else if $siblingCount > 1 {

            &:first-child:nth-last-child(#{$siblingCount}),
            &:first-child:nth-last-child(#{$siblingCount}) ~ & {
                @content;
            }

        } @else {
            @error '$siblingCount MUST be an integer > 0';
        }

    }

}

/// Mixin to create global modifier classes
/// @author Steve Slade
/// @param {String} $context
@mixin create-modifier($context) {
    [class*='--#{$context}'], [class*='--#{$context} '] {
        @content;
    }
}


/// Sets an element to use CSS Grid. Optionally takes in params to further
/// customise, but will use fallbacks if none have been set.
/// @param  {number} $size      [$grid-columns]   [How many columns, should be unitless]
/// @param  {number} $h-space   [$grid-gutter]    [The gap between columns, in px, em, % etc...]
/// @param  {number} $v-space   [$grid-buffer]    [The gap between rows, in px, em, % etc...]
/// @param  {number} $max-width [$grid-max-width] [Maximum width of the element]
/// @param  {number} $column-width [1fr] [The width of each column]
/// @return {[type]}            [description]
@mixin grid($size: $grid-columns,
            $h-space: $grid-gutter,
            $v-space: $grid-buffer,
            $max-width: $grid-max-width,
            $column-width: 1fr){
    display: grid;
    grid-template-columns: repeat($size, $column-width);
    grid-column-gap: $h-space;
    grid-row-gap: $v-space;
    margin: 0 auto;
    max-width: $max-width;
}


/// [column-span description]
/// @param  {number} $width  [1]             [The number of columns to span (the width in columns)]
/// @param  {number} $offset [0]             [Similar to bootstrap's offset - How many columns to offset by. Can also be negative to pull from the right]
/// @param  {number} $cols   [$grid-columns] [the max number of columns per row - defaults to the larger viewport variable]
@mixin column-span($width: 1, $offset: 0, $cols: $grid-columns ) {

    $offset-val: 1;

    @if ($width > $cols) {
      @warn 'Width `#{$width}` is greater than the max, setting width to `#{$cols}`';
      $width: $cols;
    }

    @if ($offset < 0) {
        $offset-val: #{$cols + 1 + $offset};
    } @else {
        $offset-val: #{$offset + 1};
    }

    grid-column: $offset-val / span $width;
}


/// [font-poppins description]
/// @param  {null}   $antialias [null]        [description]
/// @return {[type]}            [description]
@mixin font-poppins($weight: 'regular'){
  font-family: 'Poppins', sans-serif;
  font-weight: map-get($font-weights, $weight);
}

@mixin font-smoothing($smoothing: 'antialiased') {
  @if ($smoothing == 'none') {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  } @else {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
}
